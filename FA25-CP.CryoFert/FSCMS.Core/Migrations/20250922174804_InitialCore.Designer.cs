// <auto-generated />
using System;
using FSCMS.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FSCMS.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922174804_InitialCore")]
    partial class InitialCore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FSCMS.Core.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Instructions")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReminderSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TreatmentCycleId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentCycleId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RelatedId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ConsentForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ConsentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConsentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsConsented")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientSignature")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WitnessSignature")
                        .HasColumnType("longtext");

                    b.Property<int?>("WitnessUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("WitnessUserId");

                    b.ToTable("ConsentForms");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Media")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CryobankPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cane")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Canister")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TankId");

                    b.ToTable("CryobankPositions");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CryobankTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastMaintenanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("NextMaintenanceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("TankCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("CryobankTanks");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CycleMonitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CycleDay")
                        .HasColumnType("int");

                    b.Property<decimal?>("E2Level")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("EndometrialThickness")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("FSHLevel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("FollicleCount")
                        .HasColumnType("int");

                    b.Property<string>("FollicleSizes")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("LHLevel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("MedicationChanges")
                        .HasColumnType("longtext");

                    b.Property<int>("MonitoredByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MonitoringDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NextSteps")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("ProgesteroneLevel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("TreatmentCycleId")
                        .HasColumnType("int");

                    b.Property<string>("UltrasoundNotes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MonitoredByUserId");

                    b.HasIndex("TreatmentCycleId");

                    b.ToTable("CycleMonitorings");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certificates")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.EmbryoAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssessedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("BlastocystGrade")
                        .HasColumnType("longtext");

                    b.Property<int>("CellCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayOfDevelopment")
                        .HasColumnType("int");

                    b.Property<decimal>("FragmentationRate")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ICMGrade")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuitableForFreezing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuitableForTransfer")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("int");

                    b.Property<string>("TEGrade")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssessedByUserId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("EmbryoAssessments");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ChiefComplaint")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Orders")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Prescriptions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ReferralTo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Vitals")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.FeedbackResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackResponses");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.IUICycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BetaHCGLevel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("IUIDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPregnant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LutealSupportMedication")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LutealSupportStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("OvulationInductionProtocol")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OvulationInductionStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("PostWashCount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PostWashMotility")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PreWashCount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("PreWashMotility")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("PregnancyTestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SpermSource")
                        .HasColumnType("longtext");

                    b.Property<int>("TreatmentCycleId")
                        .HasColumnType("int");

                    b.Property<string>("TriggerMedication")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TriggerShotDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCycleId")
                        .IsUnique();

                    b.ToTable("IUICycles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.IVFCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("BetaHCGLevel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("EmbryosFrozen")
                        .HasColumnType("int");

                    b.Property<int?>("EmbryosTransferred")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FertilizationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FertilizationMethod")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPregnant")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MatureOocytes")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("OPUDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OocytesFertilized")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PregnancyTestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StimulationEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StimulationProtocol")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StimulationStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TotalOocytesRetrieved")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TreatmentCycleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentCycleId")
                        .IsUnique();

                    b.ToTable("IVFCycles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Channel")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RelatedEntityId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedEntityType")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.OocyteAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbnormalOocytes")
                        .HasColumnType("int");

                    b.Property<int>("AssessedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GVOocytes")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MIIOocytes")
                        .HasColumnType("int");

                    b.Property<int>("MIOocytes")
                        .HasColumnType("int");

                    b.Property<string>("Morphology")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("int");

                    b.Property<int>("TotalOocytes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssessedByUserId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("OocyteAssessments");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.PGTResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChromosomalAbnormalities")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GeneticFindings")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTransferRecommended")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Laboratory")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SpecimenId");

                    b.ToTable("PGTResults");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Allergies")
                        .HasColumnType("longtext");

                    b.Property<string>("BloodType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmergencyContact")
                        .HasColumnType("longtext");

                    b.Property<string>("EmergencyPhone")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Insurance")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("longtext");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Occupation")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.PatientRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("EncounterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PatientRecords");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EncounterId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Medicine")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ActiveFlag")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ServicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Terms")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ValidityDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ServicePackages");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ServicePackageItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ServicePackageItems");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApprovalNotes")
                        .HasColumnType("longtext");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(65,30)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PreferredTime")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ServicePackageId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedByUserId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Specimen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConsentFormId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CryobankPositionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("IUICycleId")
                        .HasColumnType("int");

                    b.Property<int?>("IVFCycleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDoubleWitnessed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Method")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StoredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("TreatmentCycleId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("WitnessUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CryobankPositionId");

                    b.HasIndex("IUICycleId");

                    b.HasIndex("IVFCycleId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentCycleId");

                    b.HasIndex("WitnessUserId");

                    b.ToTable("Specimens");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.SpermAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AnalyzedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Appearance")
                        .HasColumnType("longtext");

                    b.Property<long>("Concentration")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPostWash")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("NormalMorphology")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<decimal>("ProgressiveMotility")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SpecimenId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMotility")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Vitality")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("pH")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("AnalyzedByUserId");

                    b.HasIndex("SpecimenId");

                    b.ToTable("SpermAnalyses");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CenterInfo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NotificationRules")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.TreatmentCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TreatmentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("TreatmentCycles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.TreatmentTimeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProcessType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Results")
                        .HasColumnType("longtext");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StepDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TreatmentCycleId")
                        .HasColumnType("int");

                    b.Property<int>("UpdatedByUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TreatmentCycleId");

                    b.HasIndex("UpdatedByUserId");

                    b.ToTable("TreatmentTimelines");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Appointment", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.TreatmentCycle", "TreatmentCycle")
                        .WithMany()
                        .HasForeignKey("TreatmentCycleId");

                    b.HasOne("FSCMS.Core.Entities.User", null)
                        .WithMany("Appointments")
                        .HasForeignKey("UserId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentCycle");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ConsentForm", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("ConsentForms")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.User", "WitnessUser")
                        .WithMany()
                        .HasForeignKey("WitnessUserId");

                    b.Navigation("Patient");

                    b.Navigation("WitnessUser");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Content", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "CreatedByUser")
                        .WithMany("ContentsCreated")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CryobankPosition", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.CryobankTank", "Tank")
                        .WithMany("Positions")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CycleMonitoring", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "MonitoredByUser")
                        .WithMany()
                        .HasForeignKey("MonitoredByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.TreatmentCycle", "TreatmentCycle")
                        .WithMany("Monitorings")
                        .HasForeignKey("TreatmentCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonitoredByUser");

                    b.Navigation("TreatmentCycle");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Doctor", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "User")
                        .WithOne("DoctorProfile")
                        .HasForeignKey("FSCMS.Core.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.EmbryoAssessment", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "AssessedByUser")
                        .WithMany()
                        .HasForeignKey("AssessedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Specimen", "Specimen")
                        .WithMany("EmbryoAssessments")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessedByUser");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Encounter", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("Encounters")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.User", "Provider")
                        .WithMany("Encounters")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Feedback", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.User", null)
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.FeedbackResponse", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.IUICycle", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.TreatmentCycle", "TreatmentCycle")
                        .WithOne("IUICycle")
                        .HasForeignKey("FSCMS.Core.Entities.IUICycle", "TreatmentCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentCycle");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.IVFCycle", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.TreatmentCycle", "TreatmentCycle")
                        .WithOne("IVFCycle")
                        .HasForeignKey("FSCMS.Core.Entities.IVFCycle", "TreatmentCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TreatmentCycle");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Notification", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("FSCMS.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.OocyteAssessment", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "AssessedByUser")
                        .WithMany()
                        .HasForeignKey("AssessedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Specimen", "Specimen")
                        .WithMany("OocyteAssessments")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssessedByUser");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.PGTResult", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Specimen", "Specimen")
                        .WithMany("PGTResults")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Patient", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("FSCMS.Core.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.PatientRecord", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Encounter", "Encounter")
                        .WithMany()
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");

                    b.Navigation("Patient");

                    b.Navigation("Payment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Payment", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.User", null)
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Prescription", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Encounter", "Encounter")
                        .WithMany()
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Encounter");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ServicePackageItem", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.ServicePackage", "ServicePackage")
                        .WithMany("PackageItems")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ServiceRequest", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "ApprovedByUser")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ApprovedByUserId");

                    b.HasOne("FSCMS.Core.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("FSCMS.Core.Entities.ServicePackage", "ServicePackage")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");

                    b.Navigation("ServicePackage");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Specimen", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.CryobankPosition", "CryobankPosition")
                        .WithMany("Specimens")
                        .HasForeignKey("CryobankPositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FSCMS.Core.Entities.IUICycle", "IUICycle")
                        .WithMany("SpermSpecimens")
                        .HasForeignKey("IUICycleId");

                    b.HasOne("FSCMS.Core.Entities.IVFCycle", "IVFCycle")
                        .WithMany("Specimens")
                        .HasForeignKey("IVFCycleId");

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("Specimens")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.TreatmentCycle", "TreatmentCycle")
                        .WithMany()
                        .HasForeignKey("TreatmentCycleId");

                    b.HasOne("FSCMS.Core.Entities.User", "WitnessUser")
                        .WithMany()
                        .HasForeignKey("WitnessUserId");

                    b.Navigation("CryobankPosition");

                    b.Navigation("IUICycle");

                    b.Navigation("IVFCycle");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentCycle");

                    b.Navigation("WitnessUser");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.SpermAnalysis", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "AnalyzedByUser")
                        .WithMany()
                        .HasForeignKey("AnalyzedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Specimen", "Specimen")
                        .WithMany("SpermAnalyses")
                        .HasForeignKey("SpecimenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalyzedByUser");

                    b.Navigation("Specimen");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.TreatmentCycle", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany("TreatmentCycles")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.TreatmentTimeline", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.User", "AssignedToUser")
                        .WithMany()
                        .HasForeignKey("AssignedToUserId");

                    b.HasOne("FSCMS.Core.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.TreatmentCycle", "TreatmentCycle")
                        .WithMany("Timelines")
                        .HasForeignKey("TreatmentCycleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FSCMS.Core.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedToUser");

                    b.Navigation("Patient");

                    b.Navigation("TreatmentCycle");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.UserRole", b =>
                {
                    b.HasOne("FSCMS.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FSCMS.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CryobankPosition", b =>
                {
                    b.Navigation("Specimens");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.CryobankTank", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.IUICycle", b =>
                {
                    b.Navigation("SpermSpecimens");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.IVFCycle", b =>
                {
                    b.Navigation("Specimens");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ConsentForms");

                    b.Navigation("Encounters");

                    b.Navigation("Feedbacks");

                    b.Navigation("PatientRecords");

                    b.Navigation("Payments");

                    b.Navigation("ServiceRequests");

                    b.Navigation("Specimens");

                    b.Navigation("TreatmentCycles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.ServicePackage", b =>
                {
                    b.Navigation("PackageItems");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.Specimen", b =>
                {
                    b.Navigation("EmbryoAssessments");

                    b.Navigation("OocyteAssessments");

                    b.Navigation("PGTResults");

                    b.Navigation("SpermAnalyses");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.TreatmentCycle", b =>
                {
                    b.Navigation("IUICycle");

                    b.Navigation("IVFCycle");

                    b.Navigation("Monitorings");

                    b.Navigation("Timelines");
                });

            modelBuilder.Entity("FSCMS.Core.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("AuditLogs");

                    b.Navigation("ContentsCreated");

                    b.Navigation("DoctorProfile");

                    b.Navigation("Encounters");

                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");

                    b.Navigation("ServiceRequests");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
